# -*- coding: utf-8 -*-
"""Art_mnist .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11hPgS7utVEFqf1DggQiTpP79HIQ3fm4F
"""

import tensorflow as tf
from tensorflow import keras
from keras import models, layers
from keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

import numpy as np
import matplotlib.pyplot as plt



from art.estimators.classification import KerasClassifier
from tensorflow.keras.datasets import mnist
from art.utils import load_mnist

"""Loading MNIST"""

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28,1))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28, 28,1))
test_images = test_images.astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
tf.compat.v1.disable_eager_execution()

"""Creating the model"""

model = keras.models.load_model('../CNN_model.h5')

"""ART classifier"""

classifier = KerasClassifier(model=model,use_logits=False, clip_values=(0, 1))

"""Attack objects"""

images = test_images

from art.attacks.evasion import DeepFool,FastGradientMethod,ProjectedGradientDescent

df = DeepFool(classifier, epsilon=0.3)
fgsm = FastGradientMethod(classifier, eps = 0.3)
pgd = ProjectedGradientDescent(classifier, eps = 0.3)

"""Generate adversarial examples"""

df_images = df.generate(x=images)
fgsm_images = fgsm.generate(x=images)
pgd_images = pgd.generate(x=images)

"""Evaluate the classifier on adversarial test examples"""

test_loss_fgsm, test_acc_fgsm = model.evaluate(fgsm_images, test_labels)
test_loss_df, test_acc_df = model.evaluate(df_images, test_labels)
test_loss_pgd, test_acc_pgd = model.evaluate(pgd_images, test_labels)

print("FGSM accuracy: ", test_acc_fgsm*100, "%" )
print("PGD accuracy: ", test_acc_pgd*100, "%" )
print("DeepFool accuracy: ", test_acc_df*100, "%" )

"""Prediction of the same sample image after applying the DeepFool algorithm"""

random_index = np.random.randint(10000)

clean_image = test_images[random_index]
fgsm_image = fgsm_images[random_index]
df_image = df_images[random_index]
pgd_image = pgd_images[random_index]

predictions_clean = model.predict(images)
predictions_df = model.predict(df_images)
predictions_fgsm = model.predict(fgsm_images)
predictions_pgd = model.predict(pgd_images)

f, axarr = plt.subplots(1,4)
axarr[0].imshow(np.reshape(clean_image, (28,28)),cmap="gray")
axarr[1].imshow(np.reshape(fgsm_image, (28,28)),cmap="gray")
axarr[2].imshow(np.reshape(df_image, (28,28)),cmap="gray")
axarr[3].imshow(np.reshape(pgd_image, (28,28)),cmap="gray")

axarr[0].title.set_text("Clean: %i" % np.argmax(predictions_clean[random_index]))
axarr[1].title.set_text("FGSM: %i" % np.argmax(predictions_fgsm[random_index]))
axarr[2].title.set_text("DeepFool: %i" % np.argmax(predictions_df[random_index]))
axarr[3].title.set_text("PGD: %i" % np.argmax(predictions_pgd[random_index]))