# -*- coding: utf-8 -*-
"""ART_DeepFool_Defensive_distillation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14vZLZ8D4Zyu1_hFBCqnXHA22L7md-qbx
"""



import tensorflow as tf
from tensorflow import keras
from keras import models, layers
from keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

import numpy as np
import matplotlib.pyplot as plt

from art.attacks.evasion import FastGradientMethod
from art.defences.transformer.evasion import DefensiveDistillation

from art.estimators.classification import KerasClassifier
from tensorflow.keras.datasets import mnist
from art.utils import load_mnist

"""Loading MNIST"""

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28,1))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28, 28,1))
test_images = test_images.astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
tf.compat.v1.disable_eager_execution()

"""Creating the model"""

model = keras.models.load_model('../CNN_model.h5')

"""ART classifier"""

classifier = KerasClassifier(model=model,use_logits=False,clip_values=(0, 1))

attack = FastGradientMethod(classifier)
test_images_adv = attack.generate(x=test_images)

"""Evaluate the classifier on adversarial test examples"""

test_loss_adv, test_acc_adv = model.evaluate(test_images_adv, test_labels)
print("Adversarial accuracy: ", test_acc_adv*100, "%" )

"""Defensive distillation"""

defense = DefensiveDistillation(model, batch_size = 32, nb_epochs = 8)
def_classifier = defense(train_images, classifier)

"""Re-evaluation"""

test_loss_adv, test_acc_adv = model.evaluate(test_images_adv, test_labels)
print("Adversarial accuracy: ", test_acc_adv*100, "%" )