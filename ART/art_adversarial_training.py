# -*- coding: utf-8 -*-
"""ART_FGSM_MNISTl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z48hO8JzbnXyljNvPGKF9qAJh3KO6cBu
"""

import tensorflow as tf
from tensorflow import keras
from keras import models, layers
from keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

import numpy as np
import matplotlib.pyplot as plt

from art.attacks.evasion import DeepFool
from art.attacks.evasion import FastGradientMethod
from art.attacks.evasion import ProjectedGradientDescent

from art.estimators.classification import KerasClassifier
from tensorflow.keras.datasets import mnist


"""Loading MNIST"""

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28,1))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28, 28,1))
test_images = test_images.astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
tf.compat.v1.disable_eager_execution()

"""Creating the model"""

model = keras.models.load_model('../CNN_model.h5')

"""ART classifier"""

classifier = KerasClassifier(model=model,use_logits=False, clip_values=(0,1))

"""Attack objects"""

images = test_images
df = DeepFool(classifier, epsilon=0.3)
fgsm = FastGradientMethod(classifier, eps = 0.3)
pgd = ProjectedGradientDescent(classifier, eps = 0.3)

"""Generate adversarial examples"""

df_images = df.generate(x=images)
fgsm_images = fgsm.generate(x=images)
pgd_images = pgd.generate(x=images)

"""Evaluate the classifier on adversarial test examples"""

test_loss_fgsm, test_acc_fgsm = model.evaluate(fgsm_images, test_labels)
test_loss_df, test_acc_df = model.evaluate(df_images, test_labels)
test_loss_pgd, test_acc_pgd = model.evaluate(pgd_images, test_labels)

print("FGSM accuracy: ", test_acc_fgsm*100, "%" )
print("PGD accuracy: ", test_acc_pgd*100, "%" )
print("DeepFool accuracy: ", test_acc_df*100, "%" )

fgsm_train_images = fgsm.generate(train_images)

train_images_adv = np.append(train_images, fgsm_train_images, axis=0)
train_labels_adv = np.append(train_labels, train_labels, axis=0)

"""Re-training the classifier"""

classifier.fit(train_images_adv, train_labels_adv, batch_size=64, nb_epochs=8)

"""Re-evaluation"""

test_loss_fgsm, test_acc_fgsm = model.evaluate(fgsm_images, test_labels)
test_loss_pgd, test_acc_pgd = model.evaluate(pgd_images, test_labels)
test_loss_df, test_acc_df = model.evaluate(df_images, test_labels)


print("FGSM accuracy: ", test_acc_fgsm*100, "%" )
print("PGD accuracy: ", test_acc_pgd*100, "%" )
print("DeepFool accuracy: ", test_acc_df*100, "%" )
